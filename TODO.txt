ROADMAP
=======
V. Basic Autocomplete
V. Allow redefining the prompt through API
V. Allow running user script on startup
4. Remaining exceptions -> Always a stack trace on exit due to file close. Do some heavy testing and try to find more.
5. Clean and put more tests in place. Create a stable release.

W. Aliases (this might need the Commands rewrite...)
X. Tokenizer. Must deliver sequence of tokens and not AST directly. Must detect unfinished tokens (needed for multi-line
    and proper autocomplete). Must consider paths and that it is possible to run an executable on this or another
    directory.
Y. Multi-line input
Z. Autocomplete overhaul
-. V Let prompt have colors (this will be nice to show the branch name)
-. Allow storing the output of commands. I want to do "git symbolic-ref --short -q HEAD" to get the branch name (only
    works on recent versions of git)

-. Must have most functionality of other shells.
    -. Job control, start job in bg with &
    ^. Redirect output to file
    ^. Pipe output between commands
    -. Support || and && operators
    ^. Aliases
    ^. Multi-line input
-. Then integrate it with nsh principles
    -. Commands and functions should be almost the same
    -. Allow buffering the output of commands in variables or as streams
    -. Allow piping command output to function arguments
    -. Likewise, allow running JS and pipe the result to a command or a file
-. Then, impress (even more)
    -. Screen windows
    -. As-you-type autocomplete
    -. As-you-type syntax highlighting

EXCEPTIONS & PROBLEMS
=====================

* On CTRL+C or CTRL+D
* On cd to nonexistent dir
* require('colors') does not allow 'lalla'.red, probably something to do with different environments (String.prototype
    is not the same in nodeland and userland)
* Typing "cd ~/wo<TAB>" throws exception because autocompleter is assuming that ./~ is the name of a dir. Make it
    tolerate non-existent dirs and expand ~

IDEA HEAP
=========

Get a list of which common commands might be confusingly mistaken for plain JS. It's annoying to write a JS expression
    that starts with 'true' or 'false' and seems to return a wrong result. Another example is 'id = ...'. Have a visual
    signal for the user of whether the expression was interpreted as a command or JS.

Piping output
	ls | function wc(list) {console.log(list.length);}

There must be a way to pipe the output of a command into a variable, or even to get it inline

I want to have a status line with completions and such. One way to achieve this would be to have virtual windows on the
    screen, have (rectangular) areas with different content and assign the line reader to one of them.

I want completion as user is typing. Show list of possible commands like I3 does. Do the same for possible completions
    of everything else.

I want on-the-fly highlighting. Show the command and arguments in different colors. Highlight Javascript.

If the prompt is a function and not a string like in other shells, that's really nice because it's powerful but if that
    is a blocking or never-ending function then everything crumbles down.

Make Javascript be the means to something and not a dictator. CoffeeScript and the like should be easy to integrate.
    There should be examples and/or plugins to show how to be able to use CoffeeScript as the main language.

There will be some performance concerns. There is lots of as-you-type processing. Try this out on a RaspberryPi and do
    some performance tests, see how many times per second it can parse a complex multi-line input.

Currently, user files can only have JS. Consider if it would nice to support also commands and anything you could run on
    the command line.

    ALIASES
    -------

    Aliases are tricky. Here is how it works in bash:

        alias rm="rm -i"

    Every time "rm" is typed, it is expanded into the body. Or so the docs say. In practice it is probably only expanded
    if found where a command is supposed to be, which is fine. The hassle for NSH is: when should it be expanded.
    Ideally it should be handled by Commands. However, an alias does not simply rename a command, it can also have
    preset arguments. Sure we can have aliases as functions to solve all these problems -- that's how the builtins are
    implemented.

        nsh.alias('gco', function(){ nsh.commands.get('git').run(['checkout'].concat(arguments));})

    I don't wanna have to write this every time.

    Alternative 1: the "alias" command/function takes a string. That string is evaluated immediately and separated into
    command and arguments. This has the implication that the command has to be defined at the time, unlike in bash. When
    the alias is invoked, it simply calls the aliased command with whatever arguments are passed at invocation, plus any
    aliased arguments before them.

    Alternative 2: during parsing, if the first token is a command, and if it is an alias, then it is expanded, and the
    parsing restarts, without alias expansion. The Parser would have to query Commands to check for valid aliases.


Architecture
============

Input
    gets keystrokes, there is a mapping of key to functionality

Parser
    the functionality to accept the command (enter key) instructs to pass the current line(s) to the parser
    The parser extracts a command plus arguments, or runs JS

Environment
    There must be an API with access to:
        all the commands as functions (and everything that is in the path)
        all the nodejs globals, including process, buffer, require, etc
        a set of objects that allow overriding behaviour and attaching event handlers; even the parser should be
        available in this way. Make it such that you can override or extend parts of the parsing, or all of it together
        (dangerous, but let's think about it later)

Builtins
    cd
    'source'
        (could be a command or something like '.' ?) (or 'require' ^^)
    alias
        for compat
    bg, fg, jobs
        let's think about it later
    exit
    mkdir ?
        isn't this in the path?
    print/echo
        compat?
    read?
        useful?
    umask?
    which?
    where?
    help?
        never hurts

Should we include most of the built ins from bash and zsh to allow maximum compat? should there be some compatibility
mode that emulated them? this could probably be achieved easily.


API
===

global object NSH where all the API is

task: define key binding
task: set the prompt
task: define aliases
task: set event handler for before exit
task: override the default parser or part of it



RESEARCH
========
BASH: Possible IO redirection operations:
    M>N
        M is fd (optional, default = 1)
        N is filename
        will truncate N if exists, create otherwise
        can have whitespace after > (not before)
    M>>N
        M is fd (optional, default = 1)
        N is filename
        will append to N if exists, create otherwise
        can have whitespace after >> (not before)
    M>&N
        M is fd (optional, default = 1)
        N is fd
        can have whitespace after >& (not before)
    M<N
        M is fd (optional, default = 0)
        N is filename
        can have whitespace after < (not before)
    M<&N
        M is fd (optional, default = 0)
        N is fd
        can have whitespace after <& (not before)
    M<>N
        M is fd (optional, default = 0)
        N is filename
        assigns N to M both for reading and writing

    note that << starts heredoc and will do nothing for redirection

https://www.gnu.org/software/bash/manual/html_node/Redirections.html

Other Bash operators
    |
    &
    ||
    &&
    "

This works in bash:
    false && echo "yes" || echo "no"
    true  && echo "yes" || echo "no"

Tentative grammar...
(! is terminal)


    COMMAND_LINE:
        SUBSHELL <EOF>

    PATH:
        !RELATIVE_PATH
        !ABSOLUTE_PATH
        !DOTS_PATH
        !TILDE_PATH

    PIPELINE:
        SIMPLE_COMMAND
        SIMPLE_COMMAND !PIPE PIPELINE

    SIMPLE_COMMAND:
        REDIRECTION* PATH (REDIRECTION | !GLOB | !JS | !DQSTRING | PATH)*

    REDIRECTION:
        !GT PATH
        !GTGT PATH
        !GTAMP FD
        !LT PATH
        !LTGT PATH
        !LTAMP FD

    FD:
        [0-9]+

    LIST:
        AND_LIST
        OR_LIST

    AND_LIST:
        PIPELINE
        PIPELINE DAMP LIST

    OR_LIST:
        PIPELINE
        PIPELINE DPIPE LIST

    SUBSHELL:
        LIST
        LIST !AMP
        LIST !AMP SUBSHELL



http://www.cs.binghamton.edu/~zdu/parsdemo/srintro.html
http://www.cis.upenn.edu/~matuszek/General/recursive-descent-parsing.html



Temporary grammar, slightly different -- only globs, no paths or fd
(! is terminal)

    COMMAND_LINE:
        SUBSHELL <EOF>

    SUBSHELL:
        LIST
        LIST !AMP
        LIST !AMP SUBSHELL

    LIST:
        AND_LIST
        OR_LIST

    AND_LIST:
        PIPELINE
        PIPELINE DAMP LIST

    OR_LIST:
        PIPELINE
        PIPELINE DPIPE LIST

    PIPELINE:
        SIMPLE_COMMAND
        SIMPLE_COMMAND !PIPE PIPELINE

    SIMPLE_COMMAND:
        REDIRECTION* !GLOB (REDIRECTION | !GLOB | !JS | !DQSTRING)*

    REDIRECTION:
        !GT !GLOB
        !GTGT !GLOB
        !GTAMP !GLOB
        !LT !GLOB
        !LTGT !GLOB
        !LTAMP !GLOB



RUNNABLE INTERFACE


(following is deprecated)
        - runSync([options]) -- returns result when done
        - runAsync([options], callback<result>) -- invokes callback with result when done, don't know what the return value should be, leave it for later

    options are... optional and are NOT NECESSARILY function parameters or command arguments. Usually a runnable is a
    wrapper that will run a command with preset arguments, though nothing prevents the runnable from
    assigning those arguments on the fly based on passed options. options can be single object or variable sized
    argument list, I don't care. Implementations can choose not to implement one of these, throwing an exception for
    example. In particular, I still don't have a way to asynchronously eval JS code.

    A Runnable will have a map of integers to streams.


(second attempt)

        - run([callback], [options])
            single run method, sync, may return whatever it wants, may return and keep running in background, decision is up to implementation.
        - redirect(from, to)
            utility to redirect an FD to either another FD from this runnable, or file name, or any other stream
        - pipes
            property, maps numbers (FDs) to streams. No idea how JS runnables are going to access this, for
            example. Or how to redirect output in JS runnables.

        new Runnable(function)

(yet again)
       A runnable only has two (possibly three) streams: in, out (possibly err)
       This is a better abstraction, because having more redirections than that is specific to processes. There are only
       two other nodes that can apply a redirection: a pipeline, and, in the future, a JS snippet.


.............

I think second attempt might be the one to go with.

There's also another approach without Runnable wrapper that just passes around needed information as function parameters.

Its implementation is much simpler.

However, the approach with Runnable does in-place pre-checking: any non-existing commands or faulty Javascript are
detected early, instead of possibly when some commands are already running. This will be needed sooner or later.

There could be a visitor whose job would be to make these checks, with some performance cost. Not only there is another
visitor, Javascript will have to be compiled twice (AST is not transformed).

Perhaps there could be a hybrid implementation?

No, I don't think so.

Runnable API:
    redirOutput(fd, to)
    redirInput(fd, from)
    hasInput(fd)
    hasOutput(fd)
    pipes [available after calling run()]
    run(callback)



API for command set
    must return runnables
    has parent, to which calls are delegated when no command is found
    returns runnable given command name and arguments
    usual utilities for adding from file, dir, and paths
    builtins are also runnables -- create class for JS runnables, that should make this easier and can also be used for the parser
    allow adding a command by name and a function which returns a runnable -- this will be used for aliases which are just a wrapper around a cpRunnable

It just came to my attention one aspect in which we do not provide bash-compatibility and won't in the near future.

When expanding globs, bash does not include hidden files (starting with ".") unless the dot is there before the pattern,
or unless the dotglob option is set.
Currently, nsh's expansion does indeed include all paths that match a glob, including hidden files. I understand that
this is an issue, especially considering compatibility with shell scripts that may blindly do something like `rm *.js`
assuming that .nsh.js would not be deleted, for example.

However, if we did decide do not expand to hidden files, we would have to provide a way for the user to specify when to
have each behaviour. Also, this would add complexity if we are to maintain portability, because in certain systems we
can not simply test the filename against a pattern. Additionally, it seems to me that this is a minor issue in a daily
usage: hidden files or directories are usually employed with the purpose of configuration, or to in some way change the
behaviour of the current directory (e.g., ".git", ".bashrc", ".lock"). The names of these files or directories have
patterns which do not usually match those of normal, "work" files. I guess if you were inside the Dooper project
directory you could do `rm *dooper*` and delete ".dooper" along with "run1dooper.log", but if you called `rm *.log` (much
more common imho) it's a stretch to think you would be removing some configuration file for which the name ended in ".log".
Therefore I won't invest resources in this in the near future, knowing however that this may be a serious issue under
the wrong circumstances, and should therefore be addressed in a stable build.



------------------------------------------------------------

Changes needed to get autocomplete:
-   All matchers must clearly indicate when the returned token was an error (probably with an 'error' property set to
    truthy value); additionally, that error must indicate the character that was found and a set of allowed characters.
    This includes EOF

-   The CLT must check for an error returned from a matcher. If it is possible to recover from the error, try the next
    matcher, but keep the error object. If the subsequent matchers all return errors, aggregate all expected symbols.
    If there is an unrecoverable error, propagate it to the parser

(this part striked out) - The DescentParser must immediately propagate an error coming from the CLT

-   All parser (grammar) functions must adopt the same behavior as the CLT; that is, they must clearly indicate expected
    tokens or grammar symbols in the error, they must check and keep track of errors from recursed calls, and they must
    propagate unrecoverable errors with all the possible allowed symbols








--- Thoughts for window management

Nsh starts.
It doesn't know on which row the cursor is.
But it can reserve the current row and all below it.
It can also guarantee that there are X rows beneath the cursor by entering new lines.

Can we have an API like this:

/*** Normal prompt plus footer row with real-time clock ***/
nsh.layout.set({
    rows: [
        {
            prompt: true,
            height: 'greedy' // TODO HOW TO SAY THAT A ROW SHOULD BE STICKY TO THE BOTTOM? LIKE THIS?
        },
        {
            name: 'footer',
            height: 1
        }
    ]
});
setTimeout( => nsh.layout.panels.footer.write(new Date()));

/* OR */
/*** Normal prompt, plus up to 3 rows beneath it with autocompletion, like zsh does ***/

nsh.layout.set({
    name: 'topLevel'
    rows: [
        {
            prompt: true,
            height: 'greedy' // can't be, or completion will stick to the bottom, need to come up with another way to make footer stick to bottom
        },
        {
            name: 'completion',
            height: 'reluctant' // no initial content, so starts at height=0 ?
        },
        {
            name: 'footer',
            height: 1
        }
    ]
});


/*** Normal prompt, plus real time clock on footer, plus right sidebar with file list ***/
nsh.layout.set({
    rows: [
        {
            name: 'upper-row',
            cols: [
                {
                    prompt: true,
                    width: auto
                },
                {
                    name: 'sidebar',
                    width: '20%' /* or 0.2 */ // probably leave percentages for later, as they need to be updated when screen resizes...
                }
            ]
        },
        {
            name: 'footer',
            height: 1
        }
    ]
});


---
A quick test is to just create a bottom row and sidebar and check that the text from the command line never overflows
there (constrain the prompt to a specific area)

--

// This is probably how it's gonna look:

nsh.layout.set({
    center: {
        cols: [
            {
                rows: [
                    {
                        prompt: true
                    }, {
                        name: 'completion'
                    }
                ],
                width: auto
            }, {
                name: 'separator-top',
                fill: '|',
                width: 1
            }, {
                name: 'sidebar',
                minHeight: 5,
                width: 40
            }
        ]
    },
    footer: {
        cols: [
            {
                name: 'status',
                width: 'auto'
            }, {
                name: 'separator-bottom',
                fill: '|',
                width: 1
            }, {
                name: 'time',
                width: 20
            }
        ]
    }
});